package Input;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import framework.actionCommands.Action;
import framework.actionCommands.AttackAction;
import framework.actionCommands.CollectAction;
import framework.actionCommands.CutsceneSkipAction;
import framework.actionCommands.EscapeAction;
import framework.actionCommands.MovementAction;
import framework.actionCommands.SystemUpdateAction;
import framework.actionCommands.UnknownAction;
import framework.actionCommands.____TESTAction;

/**
 * Handles the Keyboard Input given by the user, and creates actions
 * accordingly.
 * 
 * @author Rajarshi
 *
 */
public class KeyInput extends KeyAdapter {

	private Action latestAction;
	private boolean activated;
	private Lock lock = new ReentrantLock();

	public KeyInput() {
		activated = false;
	}

	public void keyPressed(KeyEvent e) {
		if (!activated) return;
		lock.lock();
		try {
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
				latestAction = new MovementAction(MovementAction.MOVE_E);
			} else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
				latestAction = new MovementAction(MovementAction.MOVE_W);
			} else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
				latestAction = new MovementAction(MovementAction.MOVE_S);
			} else if (e.getKeyCode() == KeyEvent.VK_UP) {
				latestAction = new MovementAction(MovementAction.MOVE_N);
			} else if (e.getKeyCode() == KeyEvent.VK_A) {
				latestAction = new AttackAction();
			} else if (e.getKeyCode() == KeyEvent.VK_C) {
				latestAction = new CollectAction();
			} else if (e.getKeyCode() == KeyEvent.VK_D) {
				latestAction = new SystemUpdateAction(SystemUpdateAction.TYPE_TO_PREVIOUS_LEVEL);
			} else if (e.getKeyCode() == KeyEvent.VK_U) {
				latestAction = new SystemUpdateAction(SystemUpdateAction.TYPE_TO_NEXT_LEVEL);
			} else if (e.getKeyCode() == KeyEvent.VK_M) {
				latestAction = new SystemUpdateAction(SystemUpdateAction.TYPE_ZOOM_IN);
				return;
			} else if (e.getKeyCode() == KeyEvent.VK_N) {
				latestAction = new SystemUpdateAction(SystemUpdateAction.TYPE_ZOOM_OUT);
				return;
			} else if (e.getKeyCode() == KeyEvent.VK_ENTER) {
				latestAction = new CutsceneSkipAction();
			} else if (e.getKeyCode() == KeyEvent.VK_B) {
				latestAction = new ____TESTAction();
			} else if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
				latestAction = new EscapeAction();
			} else {
				latestAction = new UnknownAction(e);
			}
		} finally {
			lock.unlock();
		}

	}

	/**
	 * This method returns the latest action that was generated by the user in a
	 * thread-safe manner so that the game runs on the same thread throughout.
	 * It also sets the latest action to null.
	 * 
	 * @return The latest action
	 */
	public Action popLatestAction() {
		lock.lock();
		try {
			Action toReturn;

			toReturn = latestAction;
			latestAction = null;

			return toReturn;

		} finally {
			lock.unlock();
		}
	}

	/**
	 * This method returns the latest action that was generated by the user in a
	 * thread-safe manner so that the game runs on the same thread throughout.
	 * However, it does not set the latest action to null.
	 * 
	 * @return The latest action
	 */

	public Action peekLatestAction() {
		lock.lock();
		try {
			return latestAction;

		} finally {
			lock.unlock();
		}
	}

	public void activate() {
		activated = true;
	}

	public void deactivate() {
		activated = false;
	}

}
